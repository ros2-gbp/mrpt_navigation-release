# ------------------------------------------------------------------------
# Example PTG configuration file for "selfdriving" library
# ------------------------------------------------------------------------

# Max linear vel (m/s):
@define ROBOT_MAX_V  1.2
# Max angular vel (deg/s):
@define ROBOT_MAX_W  60.0
# Max distance to "foresee" obstacles (m):
@define NAV_MAX_REF_DIST 3.0    # no need to be larger than (A* timestep) * (max_vel)


[SelfDriving]
min_obstacles_height  = 0.0      // Minimum `z` coordinate of obstacles to be considered fo collision checking
max_obstacles_height  = 2.0     // Maximum `z` coordinate of obstacles to be considered fo collision checking

# PTGs: See classes derived from mrpt::nav::CParameterizedTrajectoryGenerator ( https://reference.mrpt.org/svn/classmrpt_1_1nav_1_1_c_parameterized_trajectory_generator.html)
# refer to papers for details.
#------------------------------------------------------------------------------
PTG_COUNT = 1

PTG0_Type = ptg::DiffDrive_C
PTG0_resolution = 0.05  # 0.05 # Look-up-table cell size or resolution (in meters)
PTG0_refDistance= ${NAV_MAX_REF_DIST} # Maximum distance to build PTGs (in meters), i.e. the visibility "range" of tentative paths
PTG0_num_paths= 151
PTG0_v_max_mps = ${ROBOT_MAX_V}*(1-abs(dir)/3.2)
PTG0_w_max_dps = ${ROBOT_MAX_W}
PTG0_K = +1.0   # +1: forwards, -1: backward
PTG0_score_priority = 1.0

PTG1_Type = ptg::DiffDrive_C
PTG1_resolution = 0.075  # 0.05 # Look-up-table cell size or resolution (in meters)
PTG1_refDistance= ${NAV_MAX_REF_DIST} # Maximum distance to build PTGs (in meters), i.e. the visibility "range" of tentative paths
PTG1_num_paths= 161
PTG1_v_max_mps = ${ROBOT_MAX_V}
PTG1_w_max_dps = ${ROBOT_MAX_W}
PTG1_K = -1.0   # +1: forwards, -1: backward
PTG1_score_priority = 0.5

# Default 2D robot shape for collision checks:
# Each PTG will use only one of either (a) polygonal 2D shape or, (b) radius of a circular shape

#
# IMPORTANT: Barn map obstacles are points, we must ADD the cylinders radius:
#
#RobotModel_shape2D_xs = 0.265 0.265 -0.265 -0.265
#RobotModel_shape2D_ys = -0.225 0.225 0.225 -0.225 
RobotModel_shape2D_xs = 0.30 0.30 -0.30 -0.30
RobotModel_shape2D_ys = -0.27 0.27 0.27 -0.27 
