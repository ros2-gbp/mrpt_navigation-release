# This file defines parameters to configure the settings of the class
# PFLocalizationCore inside the ROS 2 package mrpt_pf_localization.
# Refer to the package README.md and the comments below for the meaning of each
# parameter.
#
# The two top-level entries are there so we can use this file as a ROS 2
# parameter YAML file, but it can be also used directly to feed the internal
# PFLocalizationCore class skipping those two top-level YAML maps, as done
# in the unit tests (see "test/*.cpp")
#
/**:
  ros__parameters:
    # If false (default), will use 2D (SE(2)) particle filter.
    # Otherwise,the 3D mode (SE(3)) is enabled.
    use_se3_pf: false

    # Execution rate (in Hz) of the particle filter main loop:
    rate_hz: 1.0

    # Particle density (particles/mÂ²) upon initialization:
    initial_particles_per_m2: 50

    # You can include the initial pose here as parameter, or send it via a topic or service.
    initial_pose:
      # Mean (center) of initial pose
      mean: { x: 0.0, y: 0.0, z: 0.0, yaw: 0.0, pitch: 0.0, roll: 0.0 }
      std_x: 1.0     # 1 sigma uncertainty [meters]
      std_y: 1.0
      std_z: 0.0
      std_yaw: 6.0     # 1 sigma uncertainty [radians]
      std_pitch: 0.0
      std_roll: 0.0

    # Shows a live 3D window with the state of the PF, the map, sensors, etc.
    gui_enable: true
    gui_camera_follow_robot: true

    # If set to true, the PF will not be initialized until:
    # - A map is provided with georeferencing information, and
    # - The first GNSS observation arrives (with a GGA datum)
    #initialize_from_gnss: true

    # If >0, new tentative particles will be generated from GNSS data,
    # to help re-localizing if using georeferenced maps:
    samples_drawn_from_gnss: 20

    # The number of standard deviations ("sigmas") to use as the area in
    # which to draw random samples around the input initialization pose
    # (when NOT using GNSS as input)
    relocalize_num_sigmas: 3.0

    # If samples_drawn_from_gnss is enabled, the number of standard
    # deviations ("sigmas") to use as the area in which to draw random
    # samples around the GNSS prediction:
    gnss_samples_num_sigmas: 6.0


    # For SE(2) mode: Uncertainty motion model for regular odometry-based motion
    # See docs for mrpt::obs::CActionRobotMovement2D::TMotionModelOptions or https://docs.mrpt.org/reference/latest/tutorial-motion-models.html
    motion_model_2d:
      modelSelection: mmGaussian    # (mmGaussian|mmThrun)
      gaussianModel:
        a1: 0.02    # [m/m]
        a2: 0.001  # [m/rad]
        a3: 1.0     # [deg/m]
        a4: 0.25    # [deg/deg]
        minStdXY: 0.02  # [m]
        minStdPHI: 0.4  # [deg]
      thrunModel:
        alfa1_rot_rot: 0.1
        alfa2_rot_trans: 0.1
        alfa3_trans_trans: 0.1
        alfa4_trans_rot: 0.1
        additional_std_XY: 0.01 # [m]
        additional_std_phi: 0.2 # [deg]
        
    # Optional: Can be used to use only a subset of the input metric-map (.mm)
    # map layers for localization. Layer names must be separated by commas.
    #metric_map_use_only_these_layers: 'map'

    # For SE(2) mode: Uncertainty motion model to use when NO odometry has
    # been received.
    # See docs for mrpt::obs::CActionRobotMovement2D::TMotionModelOptions or https://docs.mrpt.org/reference/latest/tutorial-motion-models.html
    motion_model_no_odom_2d:
      modelSelection: mmGaussian    # (mmGaussian|mmThrun)
      gaussianModel:
        minStdXY: 0.40  # [m]
        minStdPHI: 5.0  # [deg]
    
    # For SE(3) mode: Uncertainty motion model for regular odometry-based motion
    motion_model_3d:
      modelSelection: mmGaussian
    
    # For SE(3) mode: Uncertainty motion model to use when NO odometry has
    # been received.
    motion_model_no_odom_3d:
      modelSelection: mmGaussian

    # Particle filter options:
    # Refer to docs for: [TParticleFilterOptions](https://docs.mrpt.org/reference/latest/struct_mrpt_bayes_CParticleFilter_TParticleFilterOptions.html)
    # -----------------------------------------------
    pf_options:
      # Perform adaptive sample size? (KLD algorithm)
      adaptiveSampleSize: true
      
      # Resampling of particles will be performed when ESS < BETA. [0.0, 1.0]
      BETA: 0.5
      
      # Options: pfStandardProposal | pfAuxiliaryPFStandard | pfOptimalProposal | pfAuxiliaryPFOptimal
      PF_algorithm: pfStandardProposal
      
      # Options: prMultinomial | prResidual | prStratified | prSystematic
      resamplingMethod: prMultinomial
      
      # For the next params, refer to the upstream docs above for TParticleFilterOptions
      # (probably no need to change them)
      pfAuxFilterOptimal_MaximumSearchSamples: 100
      powFactor: 1.0
      max_loglikelihood_dyn_range: 15
      pfAuxFilterStandard_FirstStageWeightsMonteCarlo: false
      pfAuxFilterOptimal_MLE: false
    
    # Dynamic sample size options.
    # Refer to docs for [mrpt::slam::TKLDParams](https://docs.mrpt.org/reference/latest/class_mrpt_slam_TKLDParams.html)
    # and to Dieter Fox's paper: 
    #    Fox, D. (2003). Adapting the sample size in particle filters through
    #    KLD-sampling. The international Journal of robotics research, 22(12), 985-1003.
    # -----------------------------------------------------------------------------------
    kld_options:
      KLD_minSampleSize: 50
      KLD_maxSampleSize: 10000
      KLD_binSize_XY: 0.25    # [meters]
      KLD_binSize_PHI: 0.17   # [radians]
      KLD_delta: 0.05
      KLD_epsilon: 0.05
      KLD_minSamplesPerBin: 0
      
    # If defined, this block will override the likelihoodOptions field of the 
    # de-serialized metric map (.mm) used as global map:
    #
    # Docs for mrpt::maps::CPointsMap::TLikelihoodOptions: https://docs.mrpt.org/reference/latest/struct_mrpt_maps_CPointsMap_TLikelihoodOptions.html
    override_likelihood_point_maps:
      sigma_dist: 0.10  # [m]
      max_corr_distance: 1.5 # [m]
      decimation: 50

    # If defined, this block will override the likelihoodOptions field of the 
    # de-serialized metric map (.mm) used as global map:
    #
    # Docs for mrpt::maps::COccupancyGridMap2D::TLikelihoodOptions: https://docs.mrpt.org/reference/latest/class_mrpt_maps_COccupancyGridMap2D_TLikelihoodOptions.html
    override_likelihood_gridmaps:
       likelihoodMethod: 'lmLikelihoodField_Thrun'
       LF_stdHit: 2.0
       LF_zHit: 0.90
       LF_zRandom: 0.10
       LF_maxRange: 81.0
       LF_maxCorrsDistance: 1.0
       LF_decimation: 1


    # After relocalization, candidate poses are grouped using a SE(3) grid with this granularity:
    relocalization_resolution_xy: 0.25  # [m]
    relocalization_resolution_phi: 10.0 # [deg]

    relocalization_initial_divisions_xy: 4
    relocalization_initial_divisions_phi: 4

    relocalization_minimum_icp_quality: 0.50 # [0,1]
    relocalization_icp_sigma: 5.0 # [m]
    
    #relocalization_icp_pipeline: stored in a separate YAML files due to the limitations
    # of importing generic YAML nested structures as ROS params yaml files.
